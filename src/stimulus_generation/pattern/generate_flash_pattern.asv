function [n_frames, fl_rows, fl_cols] = generate_flash_pattern(px_intensity, px_rng, flash_sz_px, overlap, patName, save_dir)
% Generate pattern of ON / OFF square flashes pattern.

% Add parameters:
% 'arena_size' = [n_rows, n_cols, n_pix_per_panel] - [3,12,16]
% 'px_intensity' = [bkg_color, off_color, on_color] - [6, 0, 15]
% 'px_rng_to_use' = [row_start, row_end, col_start, col_end] - [1, 48, 17, 112]
% 'flash_sz_px' = size of flash squares in pixels. - 12
% 'patName' = name used for saving the pattern = '12px_square_RF_ON_OFF';
% 'save_dir' = directory to save the pattern - '/Users/burnettl/Documents/Projects/G4_arena/G4-1_Tests'

% Creates a pattern where the first frame is a uniform pattern of intensity
% 'px_intensity(1)'. Then the subsequent frames contain individual flashes,
% squares of size 'flash_sz_px' x 'flash_sz_px'. Flash frames are ordered
% going down column one, then column two etc. So frame 2 would have a flash
% in position [1,1], then frame 3 in position [2,1] etc. This is useful for
% using the function 'sub2ind' later when making the position function to
% access these positions. All OFF flashes are ordered first, then all OFF
% flashes. 
% ______________________________________________________________________

    % Arena parameters - [n_rows, n_cols, n_pix_per_panel]
    arena_size = [3, 12, 16];    

    % Arena specs:
    n_rows = arena_size(1);
    n_cols = arena_size(2);  
    px_per_panel = arena_size(3);
    
    h_display = n_rows*px_per_panel;
    w_display = n_cols*px_per_panel; 
    
    % Light intensity values for the pattern:
    bkg_color = px_intensity(1);
    off_color = px_intensity(2);
    on_color = px_intensity(3);
    
    % Subregion of screen over which to present the flashes.
    start_pixel_w = px_rng(3);
    end_pixel_w = px_rng(4);
    
    start_pixel_h = px_rng(1);
    end_pixel_h = px_rng(2);
    
    % Stimulus size in pixels.
    flash_px = flash_sz_px;

    grid_step = flash_px * (1-overlap);
    
    % Find the specs of the grid of flshes.
    edge_st_w = start_pixel_w:grid_step:(end_pixel_w - flash_px +1);
    edge_end_w = edge_st_w + flash_px - 1;
    fl_cols = numel(edge_st_w);
    
    edge_st_h = start_pixel_h:grid_step:(end_pixel_h - flash_px +1);
    edge_end_h = edge_st_h + flash_px - 1;
    
    fl_rows = numel(edge_st_h);
    n_flashes = fl_rows*fl_cols;
    disp(strcat("Flashes of size ", string(flash_px), "px with a ", string(overlap*100), "% overlap form a ", string(fl_rows), "x", string(fl_cols), " grid of ", string(n_flashes), " flashes."))
    
    %% Generate the pattern: 
    
    % First frame = background. 
    Bkg = ones(h_display, w_display, 1)*bkg_color;
    
    % Start by making every frame a uniform gray background. 
    OFF_Pats = ones(h_display, w_display, n_flashes)*bkg_color;
    ON_Pats = ones(h_display, w_display, n_flashes)*bkg_color;
    
    idx = 1;
    % Start with the OFF flashes
    for c = 1:fl_cols
        y_st = edge_st_w(c);
        y_end = edge_end_w(c);
    
        for r = 1:fl_rows
            x_st = edge_st_h(r);
            x_end = edge_end_h(r);
        
            % Add flash
            OFF_Pats(x_st:x_end, y_st:y_end, idx) = off_color;
            ON_Pats(x_st:x_end, y_st:y_end, idx) = on_color;
        
            % Update frame number 
            idx = idx+1;
    
        end 
    end 
    
    Pats = cat(3, Bkg, OFF_Pats, ON_Pats);
    
    % Check if there are other parameters that are required.
    param.stretch = zeros(size(Pats, 3), 1);
    param.gs_val = 4;
    param.arena_pitch = 0;
    param.px_rng = px_rng;
    
    param.ID = get_pattern_ID(save_dir);
    
    save_pattern_G4(Pats, param, save_dir, patName);
    
    % Total number of frames in the pattern - both ON and OFF.
    n_frames = size(Pats, 3);
    
    % TEST % % % % % % % 
    % Visualise the pattern in order.
    
    figure
    for i = 1:196 %n_frames
    idx = flash_seq(i)+1;
    aa = Pats(:, :, idx);
    imagesc(aa)
    pause(0.2)
    end 
    
    p = sum(Pats, 3);
    q = sum(Pats(:,:, 2:15), 3);
    figure; imagesc(q)
  
    figure; imagesc(Pats(:, :, 1))
    % % 

end 